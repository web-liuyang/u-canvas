<script lang="ts" setup>
import {
	createImageData,
	UCanvas,
	Container,
	Text,
	Rectangle,
	Polyline,
	Ring,
	Pie,
	Circle,
	Polygon,
	Image,
	Style,
	Fill,
	Matrix,
} from "@/u-canvas";

import type { CSSProperties } from "vue";
import { nextTick, ref } from "vue";

import {
	FTapEvent,
	FTouchcancelEvent,
	FTouchendEvent,
	FTouchmoveEvent,
	FTouchstartEvent,
	FZoominEvent,
	FZoomoutEvent,
	TouchInfo,
} from "@/u-canvas-components/src/event";
import finger from "@/u-canvas-components/src/finger.uvue";

const px = (value: number) => `${value}px`;

const originPosition = ref<{ top: number; left: number }>({
	top: 0,
	left: 0,
});
const originTouchInfo = ref<TouchInfo>();

const onTapCurrentToolButton = (e: FTapEvent) => {
	expanded.value = !expanded.value;
};

const onTouchstartCurrentToolButton = (e: FTouchstartEvent) => {
	originTouchInfo.value = e.touchInfo;
	originPosition.value = position.value;
};

const onTouchmoveCurrentToolButton = (e: FTouchmoveEvent) => {
	const [deltaX, deltaY] = [e.x - originTouchInfo.value!.x, e.y - originTouchInfo.value!.y];

	position.value = {
		top: originPosition.value.top + deltaY,
		left: originPosition.value.left + deltaX,
	};
};

const onTouchendCurrentToolButton = (e: FTouchendEvent) => {
	originTouchInfo.value = undefined;
};

const onTouchcancelCurrentToolButton = (e: FTouchcancelEvent) => {
	originTouchInfo.value = undefined;
};

const currentToolIndex = ref(0);

const position = ref<{ top: number; left: number }>({
	top: 100,
	left: 40,
});

const expanded = ref(false);

interface ToolButton {
	icon: any;
	text: string;
	onTap: () => void;
}

const TOOL_BUTTON_SIZE = 40;

const toolButtons: ToolButton[] = [
	{
		icon: "鼠",
		text: "Selection",
		onTap: () => {},
	},
	{
		icon: "笔",
		text: "Brush",
		onTap: () => {},
	},
	{
		icon: "橡",
		text: "Eraser",
		onTap: () => {},
	},
	{
		icon: "文",
		text: "Text",
		onTap: () => {},
	},
	{
		icon: "形",
		text: "Shape",
		onTap: () => {},
	},
	{
		icon: "图",
		text: "Image",
		onTap: () => {},
	},
];
</script>

<template>
	<view
		class="toolbar"
		:style="{
			top: px(position.top),
			left: px(position.left),
			width: expanded ? px((toolButtons.length + 1) * TOOL_BUTTON_SIZE) : px(TOOL_BUTTON_SIZE),
		}"
	>
		<finger
			class="toolbar__item current"
			:title="toolButtons[currentToolIndex].text"
			:style="{ width: px(TOOL_BUTTON_SIZE), height: px(TOOL_BUTTON_SIZE) }"
			@onTap="onTapCurrentToolButton"
			@onTouchstart="onTouchstartCurrentToolButton"
			@onTouchmove="onTouchmoveCurrentToolButton"
			@onTouchend="onTouchendCurrentToolButton"
			@onTouchcancel="onTouchcancelCurrentToolButton"
		>
			{{ toolButtons[currentToolIndex].icon }}
		</finger>
		<view
			v-for="item in toolButtons"
			class="toolbar__item"
			:style="{ width: px(TOOL_BUTTON_SIZE), height: px(TOOL_BUTTON_SIZE) }"
			:title="item.text"
			@tap="item.onTap"
		>
			{{ item.icon }}
		</view>
	</view>
</template>

<style>
.toolbar {
	/* 使用 fixed 在客户端会包含导航栏高度，导致与 web 中表现不一致 */
	position: absolute;
	z-index: 1;

	display: flex;
	align-items: center;
	flex-direction: row;

	border: 1px solid red;
	border-radius: 20px;

	transition: width 0.2s linear;
}

.toolbar .toolbar__item {
	display: flex;
	align-items: center;
	justify-content: center;
}

.toolbar .toolbar__item.current {
	/* margin: 0px; */
	/* padding: 0 12px; */
	border-right: 1px solid red;
}
</style>
