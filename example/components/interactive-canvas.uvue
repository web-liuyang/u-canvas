<script lang="ts" setup>
import { ref } from "vue";
import {
	//
	ICTapEvent,
	ICTouchcancelEvent,
	ICTouchendEvent,
	ICTouchmoveEvent,
	ICTouchstartEvent,
} from "./event";

const props = defineProps<{ id: string }>();

const emit = defineEmits<{
	(e: "onTap", event: ICTapEvent): void;
	(e: "onTouchstart", event: ICTouchstartEvent): void;
	(e: "onTouchmove", event: ICTouchmoveEvent): void;
	(e: "onTouchend", event: ICTouchendEvent): void;
	(e: "onTouchcancel", event: ICTouchcancelEvent): void;
}>();

const PRESS_TIMEOUT = 200;

const pressing = ref(false);
const moving = ref(false);

const onTapTimestamp = ref(0);
const onTapTimer = ref<NodeJS.Timeout>();

const onTouchstart = (e: UniTouchEvent) => {
	e.preventDefault();
	pressing.value = true;
	onTapTimestamp.value = Date.now();

	if (onTapTimer.value) {
		clearTimeout(onTapTimer.value);
		onTapTimer.value = undefined;
	}
	onTapTimer.value = setTimeout(() => {
		const uniTouch = (e instanceof MouseEvent ? e : e.touches[0]) as UniTouch;
		emit("onTouchstart", new ICTouchstartEvent(uniTouch));
		moving.value = true;
	}, PRESS_TIMEOUT);
};

const onTouchmove = (e: UniTouchEvent) => {
	e.preventDefault();
	if (moving.value) {
		const uniTouch = (e instanceof MouseEvent ? e : e.touches[0]) as UniTouch;
		emit("onTouchmove", new ICTouchmoveEvent(uniTouch));
	}
};

const onTouchend = (e: UniTouchEvent) => {
	e.preventDefault();

	if (Date.now() - onTapTimestamp.value < PRESS_TIMEOUT) {
		const uniTouch = (e instanceof MouseEvent ? e : e.touches[0]) as UniTouch;
		emit("onTap", new ICTapEvent(uniTouch));
		if (onTapTimer.value) {
			clearTimeout(onTapTimer.value);
			onTapTimer.value = undefined;
		}
	} else if (pressing.value && moving.value) {
		const uniTouch = (e instanceof MouseEvent ? e : e.touches[0]) as UniTouch;
		emit("onTouchend", new ICTouchendEvent(uniTouch));
	}

	pressing.value = false;
	moving.value = false;
};

const onTouchcancel = (e: UniTouchEvent) => {
	e.preventDefault();
	const uniTouch = (e instanceof MouseEvent ? e : e.touches[0]) as UniTouch;
	emit("onTouchcancel", new ICTouchcancelEvent(uniTouch));
	pressing.value = false;
	moving.value = false;
};

// const onMousedown = (e: UniMouseEvent) => {
// 	e.preventDefault();
// 	pressing.value = true;
// 	onTapTimestamp.value = Date.now();

// 	if (onTapTimer.value) {
// 		clearTimeout(onTapTimer.value);
// 		onTapTimer.value = undefined;
// 	}
// 	onTapTimer.value = setTimeout(() => {
// 		emit("onTouchstart", new ICTouchstartEvent(e as unknown as UniTouch));
// 	}, PRESS_TIMEOUT);

// };
// const onMousemove = (e: UniMouseEvent) => {
// 	console.log("onMousemove", e);
// };
// const onMouseup = (e: UniMouseEvent) => {
// 	console.log("onMouseup", e);
// };
</script>

<template>
	<!-- @vue-expect-error -->
	<canvas
		:id="props.id"
		@mousedown="onTouchstart"
		@mousemove="onTouchmove"
		@mouseup="onTouchend"
		@touchstart="onTouchstart"
		@touchmove="onTouchmove"
		@touchend="onTouchend"
		@touchcancel="onTouchcancel"
	/>
</template>
