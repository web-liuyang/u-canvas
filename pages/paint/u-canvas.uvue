<script lang="ts" setup>
import {
	createPatternBitmap,
	UCanvas,
	Container,
	Text,
	Rectangle,
	Polyline,
	Ring,
	Pie,
	Circle,
	Polygon,
	Image,
} from "@/lib";

import interactiveCanvas from "./interactive-canvas.uvue";

const uCanvas = new UCanvas({ canvasId: "ucanvas", componentInstance: this });

onMounted(async () => {
	await uCanvas.ensureInitialize();

	const rect = new Container({
		x: 10,
		y: 10,
		children: [
			new Rectangle({ x: 0, y: 0, w: 100, h: 100 }),
			//
			new Text({ x: 10, y: 120, text: "Rectangle" }),
		],
	});

	uCanvas.add(rect);
	// uCanvas.add(new Rectangle({ x: 10, y: 10, w: 100, h: 100 }));
	// uCanvas.add(new Text({ x: 20, y: 130, text: "Rectangle" }));

	uCanvas.add(
		new Polyline({
			points: [
				[140, 110],
				[240, 60],
				[140, 10],
			],
		})
	);
	uCanvas.add(new Text({ x: 160, y: 130, text: "Polyline" }));

	uCanvas.add(
		new Polygon({
			points: [
				[270, 110],
				[360, 60],
				[270, 10],
			],
		})
	);
	uCanvas.add(new Text({ x: 280, y: 130, text: "Polygon" }));

	uCanvas.add(
		new Pie({
			cx: 60,
			cy: 220,
			radius: 50,
			startAngle: 0,
			endAngle: Math.PI + Math.PI / 3,
		})
	);
	uCanvas.add(new Text({ x: 50, y: 290, text: "Pie" }));

	uCanvas.add(
		new Circle({
			cx: 190,
			cy: 220,
			radius: 50,
		})
	);
	uCanvas.add(new Text({ x: 170, y: 290, text: "Circle" }));

	uCanvas.add(
		new Ring({
			center: [320, 220],
			innerRadius: 30,
			outerRadius: 50,
			startAngle: 0,
			endAngle: Math.PI + Math.PI / 1.5,
		})
	);
	uCanvas.add(new Text({ x: 300, y: 290, text: "Ring" }));

	const data = new Uint8ClampedArray([
		parseInt("10000000", 2),
		parseInt("01000000", 2),
		parseInt("00100000", 2),
		parseInt("00010000", 2),
		parseInt("00001000", 2),
		parseInt("00000100", 2),
		parseInt("00000010", 2),
		parseInt("00000001", 2),
	]);

	uCanvas.add(
		new Image({
			image: await createPatternBitmap({ data, bytesPerScanline: 8, array: [12, 12] }),
			x: 10,
			y: 330,
		})
	);
	uCanvas.add(new Text({ x: 36, y: 440, text: "Image" }));

	uCanvas.add(
		new Image({
			image: await createPatternBitmap({ data, bytesPerScanline: 8, array: [1, 1] }),
			x: 145,
			y: 330,
			w: 90,
			h: 90,
		})
	);
	uCanvas.add(new Text({ x: 135, y: 440, text: "Image With Size" }));

	uCanvas.render();
});

const onTap = (e: UniPointerEvent) => {
	console.log("tap", e);
};

const onTouchstart = (e: UniTouchEvent) => {
	console.log("touchstart", e);
};

const onTouchmove = (e: UniTouchEvent) => {
	console.log("touchmove", e);
};

const onTouchend = (e: UniTouchEvent) => {
	console.log("touchend", e);
};

const onTouchcancel = (e: UniTouchEvent) => {
	console.log("touchcancel", e);
};
</script>

<template>
	<interactive-canvas
		id="ucanvas"
		@onTap="onTap"
		@onTouchstart="onTouchstart"
		@onTouchmove="onTouchmove"
		@onTouchend="onTouchend"
		@onTouchcancel="onTouchcancel"
	/>
</template>

<style>
#ucanvas {
	width: 100%;
	height: 100%;
}
</style>
