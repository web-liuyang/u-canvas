<script lang="ts" setup>
import {
	createImageData,
	UCanvas,
	Container,
	Text,
	Rectangle,
	Polyline,
	Ring,
	Pie,
	Circle,
	Polygon,
	Image,
	Style,
	Fill,
} from "@u-canvas";

import { onMounted, nextTick, ref } from "vue";
import interactiveCanvas from "./interactive-canvas.uvue";
import {
	ICTapEvent,
	ICTouchcancelEvent,
	ICTouchendEvent,
	ICTouchmoveEvent,
	ICTouchstartEvent,
	ICZoominEvent,
	ICZoomoutEvent,
} from "./event";
import { Matrix } from "u-canvas";

const uCanvas = new UCanvas({ canvasId: "ucanvas" });

onMounted(() => {
	nextTick(async () => {
		await uCanvas.ensureInitialize();
		// uCanvas.ctx.strokeRect(0, 0, 100, 100);
		const rect = new Container({
			x: 10,
			y: 10,
			children: [
				new Rectangle({ x: 0, y: 0, w: 100, h: 100 }),
				//
				new Text({ x: 10, y: 120, text: "Rectangle" }),
			],
		});

		uCanvas.add(rect);
		// uCanvas.add(
		// 	new Rectangle({ x: 10, y: 10, w: 100, h: 100, style: new Style({ fill: new Fill({ color: "red" }) }) })
		// );
		// uCanvas.add(new Text({ x: 20, y: 130, text: "Rectangle" }));

		// uCanvas.add(
		// 	new Polyline({
		// 		points: [
		// 			[140, 110],
		// 			[240, 60],
		// 			[140, 10],
		// 		],
		// 	})
		// );
		// uCanvas.add(new Text({ x: 160, y: 130, text: "Polyline" }));

		// uCanvas.add(
		// 	new Polygon({
		// 		points: [
		// 			[270, 110],
		// 			[360, 60],
		// 			[270, 10],
		// 		],
		// 	})
		// );
		// uCanvas.add(new Text({ x: 280, y: 130, text: "Polygon" }));

		// uCanvas.add(
		// 	new Pie({
		// 		cx: 60,
		// 		cy: 220,
		// 		radius: 50,
		// 		startAngle: 0,
		// 		endAngle: Math.PI + Math.PI / 3,
		// 	})
		// );
		// uCanvas.add(new Text({ x: 50, y: 290, text: "Pie" }));

		// uCanvas.add(
		// 	new Circle({
		// 		cx: 190,
		// 		cy: 220,
		// 		radius: 50,
		// 	})
		// );
		// uCanvas.add(new Text({ x: 170, y: 290, text: "Circle" }));

		// uCanvas.add(
		// 	new Ring({
		// 		center: [320, 220],
		// 		innerRadius: 30,
		// 		outerRadius: 50,
		// 		startAngle: 0,
		// 		endAngle: Math.PI + Math.PI / 1.5,
		// 	})
		// );
		// uCanvas.add(new Text({ x: 300, y: 290, text: "Ring" }));

		// const data = new Uint8ClampedArray([
		// 	parseInt("10000000", 2),
		// 	parseInt("01000000", 2),
		// 	parseInt("00100000", 2),
		// 	parseInt("00010000", 2),
		// 	parseInt("00001000", 2),
		// 	parseInt("00000100", 2),
		// 	parseInt("00000010", 2),
		// 	parseInt("00000001", 2),
		// ]);

		// uCanvas.add(
		// 	new Image({
		// 		image: createImageData({ data, bytesPerScanline: 8, array: [12, 12] }),
		// 		x: 10,
		// 		y: 330,
		// 	})
		// );
		// uCanvas.add(new Text({ x: 36, y: 440, text: "Image" }));

		// uCanvas.add(
		// 	new Image({
		// 		image: createImageData({ data, bytesPerScanline: 8, array: [1, 1] }),
		// 		x: 145,
		// 		y: 330,
		// 		w: 90,
		// 		h: 90,
		// 	})
		// );
		// uCanvas.add(new Text({ x: 135, y: 440, text: "Image With Size" }));

		uCanvas.render();
	});
});

const originMatrix = ref<Matrix>();

const onTap = (e: ICTapEvent) => {
	console.log("tap", e);
};

const onTouchstart = (e: ICTouchstartEvent) => {
	console.log("touchstart", e);
	originMatrix.value = uCanvas.matrix;
};

const onTouchmove = (e: ICTouchmoveEvent) => {
	console.log("touchmove", e);
	const tx = originMatrix.value!.e + e.deltaX * originMatrix.value!.a;
	const ty = originMatrix.value!.f + e.deltaY * originMatrix.value!.d;
	const matrix = uCanvas.matrix.setTranslate(tx, ty);

	uCanvas.matrix = matrix;
};

const onTouchend = (e: ICTouchendEvent) => {
	console.log("touchend", e);
	originMatrix.value = undefined;
};

const onTouchcancel = (e: ICTouchcancelEvent) => {
	console.log("touchcancel", e);
	originMatrix.value = undefined;
};

const onZoomin = (e: ICZoominEvent) => {
	console.log("zoomin", e);
	const [x, y] = uCanvas.toGlobal([e.x * 2, e.y * 2]);
	const matrix = uCanvas.matrix.scale(1.1, 1.1, [x, y]);
	uCanvas.matrix = matrix;
};

const onZoomout = (e: ICZoomoutEvent) => {
	console.log("zoomout", e);
	const [x, y] = uCanvas.toGlobal([e.x * 2, e.y * 2]);
	const matrix = uCanvas.matrix.scale(0.9, 0.9, [x, y]);
	uCanvas.matrix = matrix;
};
</script>

<template>
	<interactive-canvas
		id="ucanvas"
		class="ucanvas"
		@onTap="onTap"
		@onTouchstart="onTouchstart"
		@onTouchmove="onTouchmove"
		@onTouchend="onTouchend"
		@onTouchcancel="onTouchcancel"
		@onZoomin="onZoomin"
		@onZoomout="onZoomout"
	/>
</template>

<style>
.ucanvas {
	width: 100%;
	height: 100%;
}
</style>
